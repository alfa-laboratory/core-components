@import '../../themes/src/default.css';
@import '../../tag/src/vars.css';

:root {
    --filter-tag-separator-background-color-hover: transparent;
}

.component {
    display: flex;
    width: max-content;
    color: var(--tag-text-color);
    border-width: var(--tag-border-width);
    border-style: solid;
    border-color: var(--tag-border-color);
    background-color: var(--tag-background-color);
    transition: border 0.2s ease;
    box-sizing: border-box;
    box-shadow: none;
    user-select: none;
    cursor: pointer;
    outline: none;
    white-space: nowrap;
    overflow: hidden;

    &:not(.component.disabled):hover {
        border-color: var(--tag-border-color-hover);
    }

    &:not(.component.disabled):active {
        border-color: var(--tag-border-color-active);
    }

    &.xxs {
        min-width: 60px;
        min-height: var(--size-xs-height);

        @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
            /* Хак для ие, в котором не работает центрирование по высоте с использованием флексов, если указан min-height
            Возможно другое решение - если в будущем у компонента появится обертка, установить ей display: flex / inline-flex */
            height: 32px;
        }
    }

    &.xs {
        min-width: 72px;
        min-height: 40px;

        @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
            /* Хак для ие, в котором не работает центрирование по высоте с использованием флексов, если указан min-height
            Возможно другое решение - если в будущем у компонента появится обертка, установить ей display: flex / inline-flex */
            height: 40px;
        }
    }

    &.s {
        min-width: 80px;
        min-height: var(--size-s-height);

        @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
            /* Хак для ие, в котором не работает центрирование по высоте с использованием флексов, если указан min-height
            Возможно другое решение - если в будущем у компонента появится обертка, установить ей display: flex / inline-flex */
            height: 48px;
        }
    }

    &.disabled {
        cursor: not-allowed;
        background-color: var(--tag-background-color-disabled);
        border-color: var(--tag-border-color-disabled);
    }

    &.checked {
        border-color: var(--tag-border-color-checked);

        &:not(.component.disabled) {
            background-color: var(--tag-background-color-checked);
        }

        &:not(.component.disabled).xxs {
            min-width: 84px;
        }

        &:not(.component.disabled).xs {
            min-width: 104px;
        }

        &:not(.component.disabled).s {
            min-width: 116px;
        }

        &:not(.component.disabled):hover {
            background-color: var(--tag-background-color-checked-hover);
            border-color: var(--tag-border-color-checked);
        }

        &.disabled {
            border-color: var(--tag-border-color-checked-disabled);
        }
    }

    &.focused {
        @mixin focus-outline;
    }
}

.default {
    border-radius: var(--tag-border-radius);
}

.alt {
    border-radius: var(--tag-alt-border-radius);
}

.chevron {
    position: relative;
    transition: transform 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.valueButton {
    display: flex;
    align-items: center;
    box-shadow: none;
    user-select: none;
    cursor: pointer;
    outline: none;
    background: transparent;
    border: 0;
    color: var(--tag-text-color);
    transition: background-color 0.2s ease, color 0.2s ease;

    &.xxs {
        min-width: 60px;
    }

    &.xs {
        min-width: 72px;
    }

    &.s {
        min-width: 80px;
    }

    &:not(.valueButton:disabled):hover {
        background-color: var(--tag-background-color-hover);
    }

    &:not(.valueButton:disabled):active {
        background-color: var(--tag-background-color-active);
    }

    &:disabled {
        background-color: var(--tag-background-color-disabled);
        color: var(--tag-text-color-disabled);
    }

    &.s {
        @mixin paragraph_primary_medium;
        padding-right: var(--gap-s);
        padding-left: var(--gap-xl);

        & .chevron {
            margin: 0 var(--gap-xs);
        }
    }

    &.xs {
        @mixin paragraph_primary_small;
        padding-right: var(--gap-xs);
        padding-left: var(--gap-l);

        & .chevron {
            margin: 0 var(--gap-xs) 0 var(--gap-2xs);
        }
    }

    &.xxs {
        @mixin paragraph_primary_small;
        padding-right: var(--gap-2xs);
        padding-left: var(--gap-m);

        & .chevron {
            margin: 0 var(--gap-xs) 0 var(--gap-2xs);
        }
    }

    &.open .chevron {
        transform: rotateZ(180deg);
    }

    &.checked {
        background-color: var(--tag-background-color-checked);
        color: var(--tag-text-color-checked);

        &:not(.valueButton:disabled) {
            padding-right: 0;
        }

        &:not(.valueButton:disabled):hover {
            background-color: var(--tag-background-color-checked-hover);
        }

        &:not(.valueButton:disabled):active {
            background-color: var(--tag-background-color-checked-active);
        }

        &:not(.valueButton:disabled):hover + .clear:before {
            background-color: var(--filter-tag-separator-background-color-hover);
        }

        &:not(.valueButton:disabled):active + .clear:before {
            background-color: transparent;
        }

        &:disabled {
            background-color: var(--tag-background-color-checked-disabled);
            color: var(--tag-text-color-checked-disabled);
        }
    }
}

.clear {
    position: relative;
    border-radius: 0;
    background-color: var(--tag-background-color-checked);

    &:before {
        content: '';
        position: absolute;
        left: 0;
        display: block;
        background-color: var(--color-dark-border-underline);
        width: 1px;
        transition: background-color 0.2s ease;
    }

    &:hover:before {
        background-color: var(--filter-tag-separator-background-color-hover);
    }

    &:active:before {
        background-color: transparent;
    }

    &:hover {
        background-color: var(--tag-background-color-checked-hover);
    }

    &:not(.valueButton:disabled):active {
        background-color: var(--tag-background-color-checked-active);
    }

    &.s {
        padding: 0 var(--gap-s) 0 var(--gap-xs);

        &:before {
            height: 24px;
        }
    }

    &.xs {
        padding: 0 var(--gap-xs);

        &:before {
            height: 24px;
        }
    }

    &.xxs {
        padding: 0 7px 0 var(--gap-xs);

        & > span {
            width: 18px;
            height: 18px;
        }

        &:before {
            height: 20px;
        }
    }
}
